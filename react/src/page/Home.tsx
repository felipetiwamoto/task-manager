import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import Task from "../component/Task/Task";
import { ITask } from "../component/Task/Task.interface";
import shared from "../helper/shared";
import taskAction from "../redux/action/task";

const Home = (props: any) => {
	const tags = [
		"red",
		"green",
		"blue",
		"yellow",
		"orange",
		"grey0",
		"grey1",
		"grey2",
		"grey3",
		"grey4",
		"grey5",
		"grey6",
		"grey7",
		"grey8",
		"grey9",
		"greya",
		"greyb",
		"greyc",
		"greyd",
		"greye",
		"greyf",
	];
	const tasks: ITask[] = useSelector((state: any) => state.task);
	const dispatch = useDispatch();

	const [description, setDescription] = useState<string>(props.description || "");
	const [tag, setTag] = useState<string>(props.tag || "greyd");

	const handleChange = (e: any) => {
		setDescription(e.target.value);
	};

	const handleSubmit = async (e: any) => {
		e.preventDefault();

		await fetch(`http://localhost:3000/tasks`, {
			method: "post",
			body: JSON.stringify({ id: shared().uid(), tag, description, createdAt: +new Date() }),
			headers: {
				Accept: "application/json",
				"Content-Type": "application/json",
			},
		});
		setDescription("");
		getTasks();
	};

	useEffect(() => {
		getTasks();
	}, []);

	const getTasks = async () => {
		const tasks: ITask[] = await fetch(`http://localhost:3000/tasks`).then((res) => res.json());

		const undos: ITask[] = (tasks || [])
			.filter((task: any) => !task.done)
			.sort((a: any, b: any) => a.tag.length - b.tag.length);
		const dones: ITask[] = (tasks || [])
			.filter((task: any) => task.done)
			.sort((a: any, b: any) => a.tag.length - b.tag.length);

		const sortedTasks: ITask[] = [...undos, ...dones];

		dispatch(taskAction().set(sortedTasks));
	};

	return (
		<div className="page">
			<div className="page__bg">
				<div className="page__bg__item md bg_orange"></div>
				<div className="page__bg__item sm bg_orange"></div>
				<div className="page__bg__item sm bg_yellow"></div>
				<div className="page__bg__item md bg_yellow"></div>
				<div className="page__bg__item sm bg_yellow"></div>
			</div>
			<div className="page__body">
				<div className="content">
					<div className="content__container container">
						<span className="content__title">
							<svg
								width="224"
								height="73"
								viewBox="0 0 224 73"
								fill="none"
								xmlns="http://www.w3.org/2000/svg"
							>
								<path
									d="M88.3773 6.38281V27H84.1434V6.38281H88.3773ZM94.721 6.38281V9.71045H77.8988V6.38281H94.721ZM103.996 9.90869L98.3885 27H93.8714L101.532 6.38281H104.407L103.996 9.90869ZM108.655 27L103.033 9.90869L102.58 6.38281H105.483L113.186 27H108.655ZM108.4 19.3252V22.6528H97.5106V19.3252H108.4ZM125.831 21.605C125.831 21.2368 125.774 20.9064 125.661 20.6138C125.557 20.3117 125.359 20.0379 125.066 19.7925C124.774 19.5376 124.363 19.2874 123.834 19.042C123.306 18.7965 122.621 18.5417 121.781 18.2773C120.847 17.9753 119.959 17.6354 119.119 17.2578C118.288 16.8802 117.552 16.4412 116.91 15.9409C116.277 15.4312 115.777 14.8411 115.409 14.1709C115.05 13.5007 114.871 12.7218 114.871 11.8345C114.871 10.9754 115.06 10.1966 115.437 9.49805C115.815 8.79004 116.344 8.18587 117.023 7.68555C117.703 7.17578 118.505 6.78402 119.43 6.51025C120.365 6.23649 121.389 6.09961 122.503 6.09961C124.023 6.09961 125.349 6.37337 126.482 6.9209C127.615 7.46842 128.493 8.21891 129.116 9.17236C129.749 10.1258 130.065 11.2161 130.065 12.4434H125.845C125.845 11.8392 125.718 11.3105 125.463 10.8574C125.217 10.3949 124.84 10.0314 124.33 9.76709C123.83 9.50277 123.197 9.37061 122.432 9.37061C121.696 9.37061 121.083 9.48389 120.592 9.71045C120.101 9.92757 119.733 10.2249 119.487 10.6025C119.242 10.9707 119.119 11.3861 119.119 11.8486C119.119 12.1979 119.204 12.5142 119.374 12.7974C119.553 13.0806 119.818 13.3449 120.167 13.5903C120.516 13.8358 120.946 14.0671 121.455 14.2842C121.965 14.5013 122.555 14.7137 123.225 14.9214C124.349 15.2612 125.335 15.6436 126.185 16.0684C127.044 16.4932 127.761 16.9699 128.337 17.4985C128.913 18.0272 129.347 18.6266 129.64 19.2969C129.933 19.9671 130.079 20.7271 130.079 21.5767C130.079 22.4735 129.904 23.2759 129.555 23.9839C129.206 24.6919 128.701 25.2913 128.04 25.7822C127.379 26.2731 126.591 26.646 125.675 26.9009C124.759 27.1558 123.735 27.2832 122.602 27.2832C121.583 27.2832 120.577 27.151 119.586 26.8867C118.595 26.613 117.694 26.2023 116.882 25.6548C116.079 25.1073 115.437 24.4087 114.956 23.5591C114.474 22.7095 114.234 21.7041 114.234 20.543H118.496C118.496 21.1849 118.595 21.7277 118.793 22.1714C118.992 22.6151 119.27 22.9738 119.629 23.2476C119.997 23.5213 120.431 23.7196 120.931 23.8423C121.441 23.965 121.998 24.0264 122.602 24.0264C123.339 24.0264 123.943 23.9225 124.415 23.7148C124.896 23.5072 125.25 23.2192 125.477 22.8511C125.713 22.4829 125.831 22.0675 125.831 21.605ZM137.216 6.38281V27H132.968V6.38281H137.216ZM149.563 6.38281L141.393 16.564L136.678 21.6333L135.913 17.6118L139.099 13.2505L144.352 6.38281H149.563ZM144.735 27L138.66 17.4702L141.804 14.8364L149.762 27H144.735ZM81.0989 40.3828H84.6956L89.9915 55.52L95.2874 40.3828H98.8841L91.4359 61H88.5472L81.0989 40.3828ZM79.159 40.3828H82.7415L83.3929 55.1377V61H79.159V40.3828ZM97.2415 40.3828H100.838V61H96.5902V55.1377L97.2415 40.3828ZM113.2 43.9087L107.593 61H103.076L110.736 40.3828H113.611L113.2 43.9087ZM117.859 61L112.237 43.9087L111.784 40.3828H114.687L122.39 61H117.859ZM117.604 53.3252V56.6528H106.715V53.3252H117.604ZM141.081 40.3828V61H136.833L128.55 47.1797V61H124.302V40.3828H128.55L136.847 54.2173V40.3828H141.081ZM153.415 43.9087L147.807 61H143.29L150.951 40.3828H153.826L153.415 43.9087ZM158.074 61L152.452 43.9087L151.999 40.3828H154.902L162.605 61H158.074ZM157.819 53.3252V56.6528H146.93V53.3252H157.819ZM180.602 50.2241V58.3945C180.281 58.7816 179.786 59.2017 179.116 59.6548C178.445 60.0985 177.582 60.4808 176.524 60.8018C175.467 61.1227 174.188 61.2832 172.687 61.2832C171.356 61.2832 170.143 61.0661 169.048 60.6318C167.953 60.1882 167.009 59.5415 166.216 58.6919C165.432 57.8423 164.828 56.8039 164.403 55.5767C163.978 54.34 163.766 52.9287 163.766 51.3428V50.0542C163.766 48.4683 163.969 47.057 164.375 45.8203C164.79 44.5837 165.38 43.5405 166.145 42.6909C166.909 41.8413 167.82 41.1947 168.878 40.751C169.935 40.3073 171.11 40.0854 172.404 40.0854C174.197 40.0854 175.67 40.3781 176.822 40.9634C177.973 41.5392 178.851 42.3416 179.455 43.3706C180.069 44.3901 180.447 45.5607 180.588 46.8823H176.468C176.364 46.1838 176.166 45.5749 175.873 45.0557C175.58 44.5365 175.16 44.1305 174.613 43.8379C174.075 43.5452 173.376 43.3989 172.517 43.3989C171.809 43.3989 171.176 43.5452 170.619 43.8379C170.072 44.1211 169.609 44.5412 169.232 45.0981C168.854 45.6551 168.566 46.3442 168.368 47.1655C168.17 47.9868 168.071 48.9403 168.071 50.0259V51.3428C168.071 52.4189 168.174 53.3724 168.382 54.2031C168.59 55.0244 168.897 55.7183 169.303 56.2847C169.718 56.8416 170.228 57.2617 170.832 57.5449C171.436 57.8281 172.139 57.9697 172.942 57.9697C173.612 57.9697 174.169 57.9131 174.613 57.7998C175.066 57.6865 175.429 57.5496 175.703 57.3892C175.986 57.2192 176.203 57.0588 176.354 56.9077V53.2544H172.474V50.2241H180.602ZM197.864 57.6865V61H186.889V57.6865H197.864ZM188.277 40.3828V61H184.029V40.3828H188.277ZM196.433 48.7798V52.0083H186.889V48.7798H196.433ZM197.849 40.3828V43.7104H186.889V40.3828H197.849ZM200.342 40.3828H208.031C209.607 40.3828 210.962 40.6188 212.095 41.0908C213.237 41.5628 214.115 42.2614 214.728 43.1865C215.342 44.1117 215.649 45.2492 215.649 46.5991C215.649 47.7036 215.46 48.6523 215.082 49.4453C214.714 50.2288 214.19 50.8849 213.511 51.4136C212.84 51.9328 212.052 52.3481 211.146 52.6597L209.801 53.3677H203.117L203.089 50.0542H208.059C208.805 50.0542 209.423 49.922 209.914 49.6577C210.405 49.3934 210.773 49.0252 211.018 48.5532C211.273 48.0812 211.401 47.5337 211.401 46.9106C211.401 46.2498 211.278 45.6787 211.033 45.1973C210.787 44.7158 210.414 44.3477 209.914 44.0928C209.414 43.8379 208.786 43.7104 208.031 43.7104H204.59V61H200.342V40.3828ZM211.868 61L207.167 51.8101L211.656 51.7817L216.413 60.8018V61H211.868Z"
									fill="#444444"
								/>
								<path
									d="M54.0909 32.4139V34.8561C54.0876 40.5804 52.234 46.1503 48.8066 50.7351C45.3791 55.3199 40.5614 58.6739 35.072 60.297C29.5826 61.92 23.7156 61.7251 18.346 59.7413C12.9765 57.7576 8.39199 54.0912 5.27637 49.289C2.16074 44.4869 0.6809 38.8062 1.05754 33.0943C1.43418 27.3824 3.64713 21.9453 7.36634 17.5938C11.0856 13.2423 16.1118 10.2097 21.6953 8.94813C27.2789 7.68659 33.1207 8.26376 38.3495 10.5936"
									stroke="#444444"
									strokeWidth="2"
									strokeLinecap="round"
									strokeLinejoin="round"
								/>
								<path
									d="M54.0909 13.6198L27.5455 40.1918L19.5818 32.2281"
									stroke="#444444"
									strokeWidth="2"
									strokeLinecap="round"
									strokeLinejoin="round"
								/>
							</svg>
						</span>
						<div className="content__box">
							<div className="content__new">
								<form className={`task ${tag}`} onSubmit={handleSubmit}>
									<div className="task__left">
										<div className="task__tag__selected"></div>
										<ul className="task__tag">
											{tags &&
												tags.map((tag: string) => (
													<li
														key={tag}
														className={`task__tag__item ${tag}`}
														onClick={() => setTag(tag)}
													></li>
												))}
										</ul>
									</div>
									<div className="task__right">
										<input
											type="text"
											className="task__input"
											placeholder="Ex: Study..."
											onChange={handleChange}
											value={description}
										/>
										<ul className="task__action">
											<li className="task__action__item bg_green add">
												<svg
													width="24"
													height="24"
													viewBox="0 0 24 24"
													fill="none"
													xmlns="http://www.w3.org/2000/svg"
												>
													<path
														d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z"
														stroke="black"
														strokeWidth="2"
														strokeLinecap="round"
														strokeLinejoin="round"
													/>
													<path
														d="M12 8V16"
														stroke="black"
														strokeWidth="2"
														strokeLinecap="round"
														strokeLinejoin="round"
													/>
													<path
														d="M8 12H16"
														stroke="black"
														strokeWidth="2"
														strokeLinecap="round"
														strokeLinejoin="round"
													/>
												</svg>
											</li>
										</ul>
									</div>
								</form>
							</div>
							<div className="content__task">
								{tasks &&
									tasks.map((task: any) => (
										<Task key={task.id} task={task} tags={tags} getTasks={getTasks} />
									))}
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	);
};

export default Home;
